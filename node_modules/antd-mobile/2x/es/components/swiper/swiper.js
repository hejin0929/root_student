import React, { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { withNativeProps } from '../../utils/native-props';
import { mergeProps } from '../../utils/with-default-props';
import classNames from 'classnames';
import { SwiperItem } from './swiper-item';
import { devWarning } from '../../utils/dev-log';
import { useSpring, animated } from '@react-spring/web';
import { useDrag } from '@use-gesture/react';
import PageIndicator from '../page-indicator';
import { staged } from 'staged-components';
import { useRefState } from '../../utils/use-ref-state';
import { bound } from '../../utils/bound';
var defaultProps = {
  defaultIndex: 0,
  allowTouchMove: true,
  autoplay: false,
  autoplayInterval: 3000,
  loop: true,
  direction: 'horizontal'
};
export var Swiper = /*#__PURE__*/forwardRef(staged(function (p, ref) {
  var props = mergeProps(defaultProps, p);
  var isVertical = props.direction === 'vertical';

  var _useMemo = useMemo(function () {
    var count = 0;
    var validChildren = React.Children.map(props.children, function (child) {
      if (! /*#__PURE__*/React.isValidElement(child)) return null;

      if (child.type !== SwiperItem) {
        devWarning('Swiper', 'The children of `Swiper` must be `Swiper.Item` components.');
        return null;
      }

      count++;
      return child;
    });
    return {
      validChildren: validChildren,
      count: count
    };
  }, [props.children]),
      validChildren = _useMemo.validChildren,
      count = _useMemo.count;

  if (count === 0) {
    devWarning('Swiper', '`Swiper` needs at least one child.');
    return null;
  }

  return function () {
    var loop = props.loop;

    if (count === 1 && loop) {
      devWarning('Swiper', '`Swiper` needs at least two children to enable loop.');
      loop = false;
    }

    var trackRef = useRef(null);

    function getSize() {
      var track = trackRef.current;
      if (!track) return 0;
      return isVertical ? track.offsetHeight : track.offsetWidth;
    }

    var _useState = useState(props.defaultIndex),
        current = _useState[0],
        setCurrent = _useState[1];

    var _useRefState = useRefState(false),
        dragging = _useRefState[0],
        setDragging = _useRefState[1],
        draggingRef = _useRefState[2];

    var _useSpring = useSpring(function () {
      return {
        position: bound(current, 0, count - 1) * 100,
        config: {
          tension: 200,
          friction: 30
        },
        onRest: function onRest() {
          if (draggingRef.current) return;
          var rawX = position.get();
          var totalWidth = 100 * count;
          var standardPosition = modulus(rawX, totalWidth);
          if (standardPosition === rawX) return;
          api.start({
            position: standardPosition,
            immediate: true
          });
        }
      };
    }, [count]),
        position = _useSpring[0].position,
        api = _useSpring[1];

    var bind = useDrag(function (state) {
      var size = getSize();
      if (!size) return;
      var paramIndex = isVertical ? 1 : 0;
      var offset = state.offset[paramIndex];
      var direction = state.direction[paramIndex];
      var velocity = state.velocity[paramIndex];
      setDragging(true);

      if (!state.last) {
        api.start({
          position: offset * 100 / size,
          immediate: true
        });
      } else {
        var index = Math.round((offset + Math.min(velocity * 2000, size) * direction) / size);
        swipeTo(index);
        window.setTimeout(function () {
          setDragging(false);
        });
      }
    }, {
      transform: function transform(_ref) {
        var x = _ref[0],
            y = _ref[1];
        return [-x, -y];
      },
      from: function from() {
        var size = getSize();
        return [position.get() / 100 * size, position.get() / 100 * size];
      },
      bounds: function bounds() {
        if (loop) return {};
        var size = getSize();
        return isVertical ? {
          top: 0,
          bottom: (count - 1) * size
        } : {
          left: 0,
          right: (count - 1) * size
        };
      },
      rubberband: true,
      axis: isVertical ? 'y' : 'x',
      preventScroll: !isVertical,
      pointer: {
        touch: true
      }
    });

    function swipeTo(index) {
      var _a, _b;

      if (loop) {
        var i = modulus(index, count);
        setCurrent(i);
        (_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, i);
        api.start({
          position: index * 100
        });
      } else {
        var _i = bound(index, 0, count - 1);

        setCurrent(_i);
        (_b = props.onIndexChange) === null || _b === void 0 ? void 0 : _b.call(props, _i);
        api.start({
          position: _i * 100
        });
      }
    }

    function swipeNext() {
      swipeTo(Math.round(position.get() / 100) + 1);
    }

    function swipePrev() {
      swipeTo(Math.round(position.get() / 100) - 1);
    }

    useImperativeHandle(ref, function () {
      return {
        swipeTo: swipeTo,
        swipeNext: swipeNext,
        swipePrev: swipePrev
      };
    });
    var autoplay = props.autoplay,
        autoplayInterval = props.autoplayInterval;
    useEffect(function () {
      if (!autoplay || dragging) return;
      var interval = window.setInterval(function () {
        swipeNext();
      }, autoplayInterval);
      return function () {
        window.clearInterval(interval);
      };
    }, [autoplay, autoplayInterval, dragging]);
    return withNativeProps(props, /*#__PURE__*/React.createElement("div", {
      className: classNames('adm-swiper', "adm-swiper-" + props.direction)
    }, /*#__PURE__*/React.createElement("div", Object.assign({
      className: classNames('adm-swiper-track', {
        'adm-swiper-track-allow-touch-move': props.allowTouchMove
      }),
      onClickCapture: function onClickCapture(e) {
        if (draggingRef.current) {
          e.stopPropagation();
        }
      }
    }, props.allowTouchMove ? bind() : {}), /*#__PURE__*/React.createElement("div", {
      className: 'adm-swiper-track-inner',
      ref: trackRef
    }, React.Children.map(validChildren, function (child, index) {
      var _style;

      return /*#__PURE__*/React.createElement(animated.div, {
        className: 'adm-swiper-slide',
        style: (_style = {}, _style[isVertical ? 'y' : 'x'] = position.to(function (position) {
          var finalPosition = -position + index * 100;

          if (loop) {
            var totalWidth = count * 100;
            var flagWidth = totalWidth / 2 - 10;
            finalPosition = modulus(finalPosition + flagWidth, totalWidth) - flagWidth;
          }

          return finalPosition + "%";
        }), _style.left = "-" + index * 100 + "%", _style)
      }, child);
    }))), props.indicator === undefined ? /*#__PURE__*/React.createElement("div", {
      className: 'adm-swiper-indicator'
    }, /*#__PURE__*/React.createElement(PageIndicator, Object.assign({}, props.indicatorProps, {
      total: count,
      current: current,
      direction: props.direction
    }))) : props.indicator(count, current)));
  };
}));

function modulus(value, division) {
  var remainder = value % division;
  return remainder < 0 ? remainder + division : remainder;
}